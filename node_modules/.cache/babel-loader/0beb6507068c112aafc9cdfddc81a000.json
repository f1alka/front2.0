{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\nimport './css/admin.css';\nimport { \n  User, ArrowLeft, Calendar, Book, Clock, Search, \n  Plus, X, Edit, ChevronLeft, ChevronRight \n} from 'lucide-react';\nimport mainImage1 from './nikolskaya.jpg';\nimport mainImage2 from './prospekt_mira.jpg';\nimport mainImage3 from './strast.jpg';\n\n// Main component\nconst AdminPanel = () => {\n  // States\n  const [step, setStep] = useState('category');\n  const [category, setCategory] = useState(null);\n  const [location, setLocation] = useState(null);\n  \n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [dateFilter, setDateFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  \n  const [showModal, setShowModal] = useState(false);\n  const [modalMode, setModalMode] = useState('add');\n  const [currentItem, setCurrentItem] = useState(null);\n\n  // Mock data for demonstration\n  const mockData = {\n    employers: [\n      { id: 1, email: 'anna@example.com', fio: 'Петрова Анна', work_type: 'Бармен', roles: ['staff'], contacts: ['123-456-7890'], location_name: 'Проспект мира' },\n      { id: 2, email: 'dmitry@example.com', fio: 'Морозов Дмитрий', work_type: 'Официант', roles: ['staff'], contacts: ['123-456-7891'], location_name: 'Проспект мира' },\n      { id: 3, email: 'maria@example.com', fio: 'Лебедева Мария', work_type: 'Повар', roles: ['staff'], contacts: ['123-456-7892'], location_name: 'Проспект мира' },\n    ],\n    events: [\n      { id: 1, name: 'Дегустация вин', date_start: '2023-10-20T18:00:00', description: 'Дегустация итальянских вин', location_name: 'Никольская' },\n      { id: 2, name: 'Джазовый вечер', date_start: '2023-11-15T19:00:00', description: 'Живая музыка и коктейли', location_name: 'Страстная' },\n    ],\n    residents: [\n      { id: 1, fio: 'Иванов Иван', discount_value: 15, location_name: 'Никольская' },\n      { id: 2, fio: 'Смирнова Елена', discount_value: 10, location_name: 'Проспект мира' },\n    ],\n    products: [\n      { id: 1, name: 'Маргарита', description: 'Классическая пицца', type_product: 'Пицца', components: { 'тесто': '200г', 'томаты': '100г', 'сыр': '150г' }, location_name: 'Страстная' },\n      { id: 2, name: 'Цезарь', description: 'Салат с курицей', type_product: 'Салат', components: { 'курица': '150г', 'салат': '100г', 'соус': '50г' }, location_name: 'Никольская' },\n    ],\n    workdays: [\n      { id: 1, work_time: '2023-10-20T12:00:00', employer_fio: 'Петрова Анна', location_name: 'Проспект мира' },\n      { id: 2, work_time: '2023-10-20T14:00:00', employer_fio: 'Морозов Дмитрий', location_name: 'Проспект мира' },\n      { id: 3, work_time: '2023-10-20T07:00:00', employer_fio: 'Лебедева Мария', location_name: 'Проспект мира' },\n    ]\n  };\n\n  // Fetch data based on category and location\n  useEffect(() => {\n    if (category && location) {\n      fetchData();\n    }\n  }, [category, location]);\n\n  const fetchData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real application, this would be an actual API call\n      // For now, we'll use mock data\n      setTimeout(() => {\n        let endpoint = '';\n        \n        switch(category) {\n          case 'employers':\n            endpoint = `http://176.114.90.207:8000/employers/get_list_employers/${location}`;\n            setData(mockData.employers.filter(item => item.location_name === location));\n            break;\n          case 'events':\n            endpoint = `http://176.114.90.207:8000/events/get_list_events/${location}`;\n            setData(mockData.events.filter(item => item.location_name === location));\n            break;\n          case 'residents':\n            endpoint = `http://176.114.90.207:8000/residents/${location}/get_list_residents`;\n            setData(mockData.residents.filter(item => item.location_name === location));\n            break;\n          case 'products':\n            endpoint = `http://176.114.90.207:8000/product/${location}/get_list_products`;\n            setData(mockData.products.filter(item => item.location_name === location));\n            break;\n          case 'workdays':\n            endpoint = `http://176.114.90.207:8000/workdays/${location}/get_list_workdays`;\n            setData(mockData.workdays.filter(item => item.location_name === location));\n            break;\n        }\n        \n        console.log(`Fetching data from: ${endpoint}`);\n        setLoading(false);\n      }, 500);\n    } catch (err) {\n      setError('Ошибка при загрузке данных');\n      setLoading(false);\n    }\n  };\n\n  // Filter data based on search term\n  const filteredData = data.filter(item => {\n    const searchLower = searchTerm.toLowerCase();\n    \n    // Different search logic based on category\n    if (category === 'employers' || category === 'residents') {\n      return item.fio.toLowerCase().includes(searchLower);\n    } else if (category === 'events' || category === 'products') {\n      return item.name.toLowerCase().includes(searchLower);\n    } else if (category === 'workdays') {\n      return item.employer_fio.toLowerCase().includes(searchLower);\n    }\n    \n    return true;\n  }).filter(item => {\n    // Filter by date if date filter is set\n    if (dateFilter && (category === 'events' || category === 'workdays')) {\n      const itemDate = new Date(category === 'events' ? item.date_start : item.work_time);\n      const filterDate = new Date(dateFilter);\n      \n      return itemDate.toDateString() === filterDate.toDateString();\n    }\n    \n    return true;\n  });\n\n  // Pagination\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = filteredData.slice(indexOfFirstItem, indexOfLastItem);\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\n\n  // Handle add/edit/delete\n  const handleAdd = () => {\n    setModalMode('add');\n    \n    // Initialize empty item based on category\n    let emptyItem = {};\n    \n    switch(category) {\n      case 'employers':\n        emptyItem = { email: '', fio: '', work_type: '', roles: ['staff'], contacts: [], location_name: location };\n        break;\n      case 'events':\n        emptyItem = { name: '', date_start: '', description: '', location_name: location };\n        break;\n      case 'residents':\n        emptyItem = { fio: '', discount_value: 0, location_name: location };\n        break;\n      case 'products':\n        emptyItem = { name: '', description: '', type_product: '', components: {}, location_name: location };\n        break;\n      case 'workdays':\n        emptyItem = { work_time: '', employer_fio: '', location_name: location };\n        break;\n    }\n    \n    setCurrentItem(emptyItem);\n    setShowModal(true);\n  };\n\n  const handleEdit = (item) => {\n    setModalMode('edit');\n    setCurrentItem(item);\n    setShowModal(true);\n  };\n\n  const handleDelete = (id) => {\n    // In a real application, this would be an API call\n    setData(data.filter(item => item.id !== id));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (modalMode === 'add') {\n      // In a real application, this would be an API call\n      const newItem = { ...currentItem, id: data.length + 1 };\n      setData([...data, newItem]);\n    } else {\n      // In a real application, this would be an API call\n      setData(data.map(item => item.id === currentItem.id ? currentItem : item));\n    }\n    \n    setShowModal(false);\n  };\n\n  // Render functions\n  const renderCategorySelection = () => (\n    <div className=\"admin-selection\">\n      <div className=\"admin-option\" onClick={() => { setCategory('employers'); setStep('location'); }}>\n        <User className=\"admin-option-icon\" />\n        Работники\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('residents'); setStep('location'); }}>\n        <User className=\"admin-option-icon\" />\n        Постоянники\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('events'); setStep('location'); }}>\n        <Calendar className=\"admin-option-icon\" />\n        События\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('products'); setStep('location'); }}>\n        <Book className=\"admin-option-icon\" />\n        Методички\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('workdays'); setStep('location'); }}>\n        <Clock className=\"admin-option-icon\" />\n        Расписание\n      </div>\n    </div>\n  );\n\n  const renderLocationSelection = () => (\n    <>\n      <button className=\"admin-back-button\" onClick={() => { setStep('category'); setCategory(null); }}>\n        <ArrowLeft size={16} /> Назад\n      </button>\n      \n      <div className=\"admin-location-selection\">\n        <div className=\"admin-location-card\" onClick={() => { setLocation('Проспект мира'); setStep('data'); }}>\n          <img \n            src=\"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80\" \n            alt=\"Проспект мира\" \n            className=\"admin-location-image\" \n          />\n          <div className=\"admin-location-name\">Проспект мира</div>\n        </div>\n        \n        <div className=\"admin-location-card\" onClick={() => { setLocation('Страстная'); setStep('data'); }}>\n          <img \n            src=\"https://images.unsplash.com/photo-1514933651103-005eec06c04b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80\" \n            alt=\"Страстная\" \n            className=\"admin-location-image\" \n          />\n          <div className=\"admin-location-name\">Страстная</div>\n        </div>\n        \n        <div className=\"admin-location-card\" onClick={() => { setLocation('Никольская'); setStep('data'); }}>\n          <img \n            src=\"https://images.unsplash.com/photo-1525268323446-0505b6fe7778?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1472&q=80\" \n            alt=\"Никольская\" \n            className=\"admin-location-image\" \n          />\n          <div className=\"admin-location-name\">Никольская</div>\n        </div>\n      </div>\n    </>\n  );\n\n  const renderDataView = () => {\n    if (loading) return <div>Загрузка...</div>;\n    if (error) return <div>{error}</div>;\n    \n    return (\n      <>\n        <div className=\"admin-back-button\" onClick={() => { setStep('location'); setLocation(null); }}>\n          <ArrowLeft size={16} /> Назад\n        </div>\n        \n        <div className=\"admin-location-title\">{location}</div>\n        \n        <div className=\"admin-data-container\">\n          <div className=\"admin-search-bar\">\n            <input \n              type=\"text\" \n              placeholder={category === 'workdays' ? \"Поиск по имени сотрудника...\" : \"Поиск...\"}\n              className=\"admin-search-input\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            \n            {(category === 'events' || category === 'workdays') && (\n              <input \n                type=\"date\" \n                className=\"admin-date-input\"\n                value={dateFilter}\n                onChange={(e) => setDateFilter(e.target.value)}\n              />\n            )}\n          </div>\n          \n          <button className=\"admin-add-button\" onClick={handleAdd}>\n            <Plus size={16} /> Добавить\n          </button>\n          \n          {renderDataContent()}\n          \n          {totalPages > 1 && (\n            <div className=\"admin-pagination\">\n              <button \n                className=\"admin-pagination-button\"\n                disabled={currentPage === 1}\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n              >\n                <ChevronLeft size={16} />\n              </button>\n              \n              {Array.from({ length: totalPages }, (_, i) => (\n                <button \n                  key={i}\n                  className={`admin-pagination-button ${currentPage === i + 1 ? 'active' : ''}`}\n                  onClick={() => setCurrentPage(i + 1)}\n                >\n                  {i + 1}\n                </button>\n              ))}\n              \n              <button \n                className=\"admin-pagination-button\"\n                disabled={currentPage === totalPages}\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n              >\n                <ChevronRight size={16} />\n              </button>\n            </div>\n          )}\n        </div>\n      </>\n    );\n  };\n\n  const renderDataContent = () => {\n    switch(category) {\n      case 'employers':\n        return renderEmployersTable();\n      case 'events':\n        return renderEventsTable();\n      case 'residents':\n        return renderResidentsCards();\n      case 'products':\n        return renderProductsTable();\n      case 'workdays':\n        return renderWorkdaysTable();\n      default:\n        return null;\n    }\n  };\n\n  const renderEmployersTable = () => (\n    <div>\n      {currentItems.map((employer) => (\n        <div key={employer.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{employer.fio}</div>\n          <div className=\"admin-table-cell\">{employer.work_type}</div>\n          <div className=\"admin-table-cell\">{employer.email}</div>\n          <div className=\"admin-table-cell\">{employer.location_name}</div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(employer)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(employer.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderEventsTable = () => (\n    <div>\n      {currentItems.map((event) => (\n        <div key={event.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{event.name}</div>\n          <div className=\"admin-table-cell\">{new Date(event.date_start).toLocaleDateString()}</div>\n          <div className=\"admin-table-cell\">{new Date(event.date_start).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}-{new Date(new Date(event.date_start).getTime() + 4 * 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>\n          <div className=\"admin-table-cell\">{event.location_name}</div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(event)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(event.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderResidentsCards = () => (\n    <div className=\"admin-cards-container\">\n      {currentItems.map((resident) => (\n        <div key={resident.id} className=\"admin-card\">\n          <div className=\"admin-card-header\">{resident.fio}</div>\n          <div className=\"admin-card-body\">\n            <p>Скидка: {resident.discount_value}%</p>\n            <p>Локация: {resident.location_name}</p>\n          </div>\n          <div className=\"admin-card-footer\">\n            <div className=\"admin-card-action admin-card-edit\" onClick={() => handleEdit(resident)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-card-action admin-card-delete\" onClick={() => handleDelete(resident.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderProductsTable = () => (\n    <div>\n      {currentItems.map((product) => (\n        <div key={product.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{product.name}</div>\n          <div className=\"admin-table-cell\">{product.type_product}</div>\n          <div className=\"admin-table-cell\">{product.description.substring(0, 50)}...</div>\n          <div className=\"admin-table-cell\">{product.location_name}</div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(product)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(product.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderWorkdaysTable = () => (\n    <div>\n      {currentItems.map((workday) => (\n        <div key={workday.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{workday.employer_fio}</div>\n          <div className=\"admin-table-cell\">{workday.location_name}</div>\n          <div className=\"admin-table-cell\">{new Date(workday.work_time).toLocaleDateString()}</div>\n          <div className=\"admin-table-cell\">\n            {new Date(workday.work_time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}-\n            {new Date(new Date(workday.work_time).getTime() + 8 * 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n          </div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(workday)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(workday.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderModal = () => {\n    if (!showModal) return null;\n    \n    return (\n      <div className=\"admin-modal\">\n        <div className=\"admin-modal-content\">\n          <div className=\"admin-modal-header\">\n            <h2>{modalMode === 'add' ? 'Добавить' : 'Редактировать'}</h2>\n            <button className=\"admin-modal-close\" onClick={() => setShowModal(false)}>×</button>\n          </div>\n          \n          <form className=\"admin-form\" onSubmit={handleSubmit}>\n            {renderFormFields()}\n            \n            <button type=\"submit\" className=\"admin-form-submit\">\n              {modalMode === 'add' ? 'Добавить' : 'Сохранить'}\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  };\n\n  const renderFormFields = () => {\n    switch(category) {\n      case 'employers':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">ФИО</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.fio || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, fio: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Email</label>\n              <input \n                type=\"email\" \n                className=\"admin-form-input\"\n                value={currentItem?.email || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, email: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Должность</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.work_type || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, work_type: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Контакты</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.contacts?.join(', ') || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, contacts: e.target.value.split(', ') })}\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Описание</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={currentItem?.description || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, description: e.target.value })}\n              />\n            </div>\n          </>\n        );\n        \n      case 'events':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Название</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.name || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, name: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Дата и время начала</label>\n              <input \n                type=\"datetime-local\" \n                className=\"admin-form-input\"\n                value={currentItem?.date_start ? new Date(currentItem.date_start).toISOString().slice(0, 16) : ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, date_start: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Описание</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={currentItem?.description || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, description: e.target.value })}\n                required\n              />\n            </div>\n          </>\n        );\n        \n      case 'residents':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">ФИО</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.fio || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, fio: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Скидка (%)</label>\n              <input \n                type=\"number\" \n                className=\"admin-form-input\"\n                value={currentItem?.discount_value || 0}\n                onChange={(e) => setCurrentItem({ ...currentItem, discount_value: parseInt(e.target.value) })}\n                required\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n          </>\n        );\n        \n      case 'products':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Название</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.name || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, name: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Тип</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.type_product || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, type_product: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Описание</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={currentItem?.description || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, description: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Компоненты (JSON)</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={JSON.stringify(currentItem?.components || {}, null, 2)}\n                onChange={(e) => {\n                  try {\n                    const components = JSON.parse(e.target.value);\n                    setCurrentItem({ ...currentItem, components });\n                  } catch (err) {\n                    // Invalid JSON, do nothing\n                  }\n                }}\n                required\n              />\n            </div>\n          </>\n        );\n        \n      case 'workdays':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">ФИО сотрудника</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.employer_fio || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, employer_fio: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Дата и время начала</label>\n              <input \n                type=\"datetime-local\" \n                className=\"admin-form-input\"\n                value={currentItem?.work_time ? new Date(currentItem.work_time).toISOString().slice(0, 16) : ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, work_time: e.target.value })}\n                required\n              />\n            </div>\n          </>\n        );\n        \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"admin-container\">\n      <div className=\"admin-header\">\n        Административная панель\n      </div>\n      \n      {step === 'category' && renderCategorySelection()}\n      {step === 'location' && renderLocationSelection()}\n      {step === 'data' && renderDataView()}\n      \n      {renderModal()}\n    </div>\n  );\n};\n\nexport default AdminPanel;\n\n*/","map":{"version":3,"names":[],"sources":["/home/f1alka/front_fut/front2.0/src/pages/Mixes.jsx"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport './css/admin.css';\nimport { \n  User, ArrowLeft, Calendar, Book, Clock, Search, \n  Plus, X, Edit, ChevronLeft, ChevronRight \n} from 'lucide-react';\nimport mainImage1 from './nikolskaya.jpg';\nimport mainImage2 from './prospekt_mira.jpg';\nimport mainImage3 from './strast.jpg';\n\n// Main component\nconst AdminPanel = () => {\n  // States\n  const [step, setStep] = useState('category');\n  const [category, setCategory] = useState(null);\n  const [location, setLocation] = useState(null);\n  \n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [dateFilter, setDateFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  \n  const [showModal, setShowModal] = useState(false);\n  const [modalMode, setModalMode] = useState('add');\n  const [currentItem, setCurrentItem] = useState(null);\n\n  // Mock data for demonstration\n  const mockData = {\n    employers: [\n      { id: 1, email: 'anna@example.com', fio: 'Петрова Анна', work_type: 'Бармен', roles: ['staff'], contacts: ['123-456-7890'], location_name: 'Проспект мира' },\n      { id: 2, email: 'dmitry@example.com', fio: 'Морозов Дмитрий', work_type: 'Официант', roles: ['staff'], contacts: ['123-456-7891'], location_name: 'Проспект мира' },\n      { id: 3, email: 'maria@example.com', fio: 'Лебедева Мария', work_type: 'Повар', roles: ['staff'], contacts: ['123-456-7892'], location_name: 'Проспект мира' },\n    ],\n    events: [\n      { id: 1, name: 'Дегустация вин', date_start: '2023-10-20T18:00:00', description: 'Дегустация итальянских вин', location_name: 'Никольская' },\n      { id: 2, name: 'Джазовый вечер', date_start: '2023-11-15T19:00:00', description: 'Живая музыка и коктейли', location_name: 'Страстная' },\n    ],\n    residents: [\n      { id: 1, fio: 'Иванов Иван', discount_value: 15, location_name: 'Никольская' },\n      { id: 2, fio: 'Смирнова Елена', discount_value: 10, location_name: 'Проспект мира' },\n    ],\n    products: [\n      { id: 1, name: 'Маргарита', description: 'Классическая пицца', type_product: 'Пицца', components: { 'тесто': '200г', 'томаты': '100г', 'сыр': '150г' }, location_name: 'Страстная' },\n      { id: 2, name: 'Цезарь', description: 'Салат с курицей', type_product: 'Салат', components: { 'курица': '150г', 'салат': '100г', 'соус': '50г' }, location_name: 'Никольская' },\n    ],\n    workdays: [\n      { id: 1, work_time: '2023-10-20T12:00:00', employer_fio: 'Петрова Анна', location_name: 'Проспект мира' },\n      { id: 2, work_time: '2023-10-20T14:00:00', employer_fio: 'Морозов Дмитрий', location_name: 'Проспект мира' },\n      { id: 3, work_time: '2023-10-20T07:00:00', employer_fio: 'Лебедева Мария', location_name: 'Проспект мира' },\n    ]\n  };\n\n  // Fetch data based on category and location\n  useEffect(() => {\n    if (category && location) {\n      fetchData();\n    }\n  }, [category, location]);\n\n  const fetchData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real application, this would be an actual API call\n      // For now, we'll use mock data\n      setTimeout(() => {\n        let endpoint = '';\n        \n        switch(category) {\n          case 'employers':\n            endpoint = `http://176.114.90.207:8000/employers/get_list_employers/${location}`;\n            setData(mockData.employers.filter(item => item.location_name === location));\n            break;\n          case 'events':\n            endpoint = `http://176.114.90.207:8000/events/get_list_events/${location}`;\n            setData(mockData.events.filter(item => item.location_name === location));\n            break;\n          case 'residents':\n            endpoint = `http://176.114.90.207:8000/residents/${location}/get_list_residents`;\n            setData(mockData.residents.filter(item => item.location_name === location));\n            break;\n          case 'products':\n            endpoint = `http://176.114.90.207:8000/product/${location}/get_list_products`;\n            setData(mockData.products.filter(item => item.location_name === location));\n            break;\n          case 'workdays':\n            endpoint = `http://176.114.90.207:8000/workdays/${location}/get_list_workdays`;\n            setData(mockData.workdays.filter(item => item.location_name === location));\n            break;\n        }\n        \n        console.log(`Fetching data from: ${endpoint}`);\n        setLoading(false);\n      }, 500);\n    } catch (err) {\n      setError('Ошибка при загрузке данных');\n      setLoading(false);\n    }\n  };\n\n  // Filter data based on search term\n  const filteredData = data.filter(item => {\n    const searchLower = searchTerm.toLowerCase();\n    \n    // Different search logic based on category\n    if (category === 'employers' || category === 'residents') {\n      return item.fio.toLowerCase().includes(searchLower);\n    } else if (category === 'events' || category === 'products') {\n      return item.name.toLowerCase().includes(searchLower);\n    } else if (category === 'workdays') {\n      return item.employer_fio.toLowerCase().includes(searchLower);\n    }\n    \n    return true;\n  }).filter(item => {\n    // Filter by date if date filter is set\n    if (dateFilter && (category === 'events' || category === 'workdays')) {\n      const itemDate = new Date(category === 'events' ? item.date_start : item.work_time);\n      const filterDate = new Date(dateFilter);\n      \n      return itemDate.toDateString() === filterDate.toDateString();\n    }\n    \n    return true;\n  });\n\n  // Pagination\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = filteredData.slice(indexOfFirstItem, indexOfLastItem);\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\n\n  // Handle add/edit/delete\n  const handleAdd = () => {\n    setModalMode('add');\n    \n    // Initialize empty item based on category\n    let emptyItem = {};\n    \n    switch(category) {\n      case 'employers':\n        emptyItem = { email: '', fio: '', work_type: '', roles: ['staff'], contacts: [], location_name: location };\n        break;\n      case 'events':\n        emptyItem = { name: '', date_start: '', description: '', location_name: location };\n        break;\n      case 'residents':\n        emptyItem = { fio: '', discount_value: 0, location_name: location };\n        break;\n      case 'products':\n        emptyItem = { name: '', description: '', type_product: '', components: {}, location_name: location };\n        break;\n      case 'workdays':\n        emptyItem = { work_time: '', employer_fio: '', location_name: location };\n        break;\n    }\n    \n    setCurrentItem(emptyItem);\n    setShowModal(true);\n  };\n\n  const handleEdit = (item) => {\n    setModalMode('edit');\n    setCurrentItem(item);\n    setShowModal(true);\n  };\n\n  const handleDelete = (id) => {\n    // In a real application, this would be an API call\n    setData(data.filter(item => item.id !== id));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (modalMode === 'add') {\n      // In a real application, this would be an API call\n      const newItem = { ...currentItem, id: data.length + 1 };\n      setData([...data, newItem]);\n    } else {\n      // In a real application, this would be an API call\n      setData(data.map(item => item.id === currentItem.id ? currentItem : item));\n    }\n    \n    setShowModal(false);\n  };\n\n  // Render functions\n  const renderCategorySelection = () => (\n    <div className=\"admin-selection\">\n      <div className=\"admin-option\" onClick={() => { setCategory('employers'); setStep('location'); }}>\n        <User className=\"admin-option-icon\" />\n        Работники\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('residents'); setStep('location'); }}>\n        <User className=\"admin-option-icon\" />\n        Постоянники\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('events'); setStep('location'); }}>\n        <Calendar className=\"admin-option-icon\" />\n        События\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('products'); setStep('location'); }}>\n        <Book className=\"admin-option-icon\" />\n        Методички\n      </div>\n      <div className=\"admin-option\" onClick={() => { setCategory('workdays'); setStep('location'); }}>\n        <Clock className=\"admin-option-icon\" />\n        Расписание\n      </div>\n    </div>\n  );\n\n  const renderLocationSelection = () => (\n    <>\n      <button className=\"admin-back-button\" onClick={() => { setStep('category'); setCategory(null); }}>\n        <ArrowLeft size={16} /> Назад\n      </button>\n      \n      <div className=\"admin-location-selection\">\n        <div className=\"admin-location-card\" onClick={() => { setLocation('Проспект мира'); setStep('data'); }}>\n          <img \n            src=\"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80\" \n            alt=\"Проспект мира\" \n            className=\"admin-location-image\" \n          />\n          <div className=\"admin-location-name\">Проспект мира</div>\n        </div>\n        \n        <div className=\"admin-location-card\" onClick={() => { setLocation('Страстная'); setStep('data'); }}>\n          <img \n            src=\"https://images.unsplash.com/photo-1514933651103-005eec06c04b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80\" \n            alt=\"Страстная\" \n            className=\"admin-location-image\" \n          />\n          <div className=\"admin-location-name\">Страстная</div>\n        </div>\n        \n        <div className=\"admin-location-card\" onClick={() => { setLocation('Никольская'); setStep('data'); }}>\n          <img \n            src=\"https://images.unsplash.com/photo-1525268323446-0505b6fe7778?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1472&q=80\" \n            alt=\"Никольская\" \n            className=\"admin-location-image\" \n          />\n          <div className=\"admin-location-name\">Никольская</div>\n        </div>\n      </div>\n    </>\n  );\n\n  const renderDataView = () => {\n    if (loading) return <div>Загрузка...</div>;\n    if (error) return <div>{error}</div>;\n    \n    return (\n      <>\n        <div className=\"admin-back-button\" onClick={() => { setStep('location'); setLocation(null); }}>\n          <ArrowLeft size={16} /> Назад\n        </div>\n        \n        <div className=\"admin-location-title\">{location}</div>\n        \n        <div className=\"admin-data-container\">\n          <div className=\"admin-search-bar\">\n            <input \n              type=\"text\" \n              placeholder={category === 'workdays' ? \"Поиск по имени сотрудника...\" : \"Поиск...\"}\n              className=\"admin-search-input\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            \n            {(category === 'events' || category === 'workdays') && (\n              <input \n                type=\"date\" \n                className=\"admin-date-input\"\n                value={dateFilter}\n                onChange={(e) => setDateFilter(e.target.value)}\n              />\n            )}\n          </div>\n          \n          <button className=\"admin-add-button\" onClick={handleAdd}>\n            <Plus size={16} /> Добавить\n          </button>\n          \n          {renderDataContent()}\n          \n          {totalPages > 1 && (\n            <div className=\"admin-pagination\">\n              <button \n                className=\"admin-pagination-button\"\n                disabled={currentPage === 1}\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n              >\n                <ChevronLeft size={16} />\n              </button>\n              \n              {Array.from({ length: totalPages }, (_, i) => (\n                <button \n                  key={i}\n                  className={`admin-pagination-button ${currentPage === i + 1 ? 'active' : ''}`}\n                  onClick={() => setCurrentPage(i + 1)}\n                >\n                  {i + 1}\n                </button>\n              ))}\n              \n              <button \n                className=\"admin-pagination-button\"\n                disabled={currentPage === totalPages}\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n              >\n                <ChevronRight size={16} />\n              </button>\n            </div>\n          )}\n        </div>\n      </>\n    );\n  };\n\n  const renderDataContent = () => {\n    switch(category) {\n      case 'employers':\n        return renderEmployersTable();\n      case 'events':\n        return renderEventsTable();\n      case 'residents':\n        return renderResidentsCards();\n      case 'products':\n        return renderProductsTable();\n      case 'workdays':\n        return renderWorkdaysTable();\n      default:\n        return null;\n    }\n  };\n\n  const renderEmployersTable = () => (\n    <div>\n      {currentItems.map((employer) => (\n        <div key={employer.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{employer.fio}</div>\n          <div className=\"admin-table-cell\">{employer.work_type}</div>\n          <div className=\"admin-table-cell\">{employer.email}</div>\n          <div className=\"admin-table-cell\">{employer.location_name}</div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(employer)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(employer.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderEventsTable = () => (\n    <div>\n      {currentItems.map((event) => (\n        <div key={event.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{event.name}</div>\n          <div className=\"admin-table-cell\">{new Date(event.date_start).toLocaleDateString()}</div>\n          <div className=\"admin-table-cell\">{new Date(event.date_start).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}-{new Date(new Date(event.date_start).getTime() + 4 * 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>\n          <div className=\"admin-table-cell\">{event.location_name}</div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(event)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(event.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderResidentsCards = () => (\n    <div className=\"admin-cards-container\">\n      {currentItems.map((resident) => (\n        <div key={resident.id} className=\"admin-card\">\n          <div className=\"admin-card-header\">{resident.fio}</div>\n          <div className=\"admin-card-body\">\n            <p>Скидка: {resident.discount_value}%</p>\n            <p>Локация: {resident.location_name}</p>\n          </div>\n          <div className=\"admin-card-footer\">\n            <div className=\"admin-card-action admin-card-edit\" onClick={() => handleEdit(resident)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-card-action admin-card-delete\" onClick={() => handleDelete(resident.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderProductsTable = () => (\n    <div>\n      {currentItems.map((product) => (\n        <div key={product.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{product.name}</div>\n          <div className=\"admin-table-cell\">{product.type_product}</div>\n          <div className=\"admin-table-cell\">{product.description.substring(0, 50)}...</div>\n          <div className=\"admin-table-cell\">{product.location_name}</div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(product)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(product.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderWorkdaysTable = () => (\n    <div>\n      {currentItems.map((workday) => (\n        <div key={workday.id} className=\"admin-table-row\">\n          <div className=\"admin-table-cell\">{workday.employer_fio}</div>\n          <div className=\"admin-table-cell\">{workday.location_name}</div>\n          <div className=\"admin-table-cell\">{new Date(workday.work_time).toLocaleDateString()}</div>\n          <div className=\"admin-table-cell\">\n            {new Date(workday.work_time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}-\n            {new Date(new Date(workday.work_time).getTime() + 8 * 60 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n          </div>\n          <div className=\"admin-table-actions\">\n            <div className=\"admin-action-button admin-edit-button\" onClick={() => handleEdit(workday)}>\n              <Edit size={16} />\n            </div>\n            <div className=\"admin-action-button admin-delete-button\" onClick={() => handleDelete(workday.id)}>\n              <X size={16} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderModal = () => {\n    if (!showModal) return null;\n    \n    return (\n      <div className=\"admin-modal\">\n        <div className=\"admin-modal-content\">\n          <div className=\"admin-modal-header\">\n            <h2>{modalMode === 'add' ? 'Добавить' : 'Редактировать'}</h2>\n            <button className=\"admin-modal-close\" onClick={() => setShowModal(false)}>×</button>\n          </div>\n          \n          <form className=\"admin-form\" onSubmit={handleSubmit}>\n            {renderFormFields()}\n            \n            <button type=\"submit\" className=\"admin-form-submit\">\n              {modalMode === 'add' ? 'Добавить' : 'Сохранить'}\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  };\n\n  const renderFormFields = () => {\n    switch(category) {\n      case 'employers':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">ФИО</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.fio || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, fio: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Email</label>\n              <input \n                type=\"email\" \n                className=\"admin-form-input\"\n                value={currentItem?.email || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, email: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Должность</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.work_type || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, work_type: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Контакты</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.contacts?.join(', ') || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, contacts: e.target.value.split(', ') })}\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Описание</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={currentItem?.description || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, description: e.target.value })}\n              />\n            </div>\n          </>\n        );\n        \n      case 'events':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Название</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.name || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, name: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Дата и время начала</label>\n              <input \n                type=\"datetime-local\" \n                className=\"admin-form-input\"\n                value={currentItem?.date_start ? new Date(currentItem.date_start).toISOString().slice(0, 16) : ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, date_start: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Описание</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={currentItem?.description || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, description: e.target.value })}\n                required\n              />\n            </div>\n          </>\n        );\n        \n      case 'residents':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">ФИО</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.fio || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, fio: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Скидка (%)</label>\n              <input \n                type=\"number\" \n                className=\"admin-form-input\"\n                value={currentItem?.discount_value || 0}\n                onChange={(e) => setCurrentItem({ ...currentItem, discount_value: parseInt(e.target.value) })}\n                required\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n          </>\n        );\n        \n      case 'products':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Название</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.name || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, name: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Тип</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.type_product || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, type_product: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Описание</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={currentItem?.description || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, description: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Компоненты (JSON)</label>\n              <textarea \n                className=\"admin-form-textarea\"\n                value={JSON.stringify(currentItem?.components || {}, null, 2)}\n                onChange={(e) => {\n                  try {\n                    const components = JSON.parse(e.target.value);\n                    setCurrentItem({ ...currentItem, components });\n                  } catch (err) {\n                    // Invalid JSON, do nothing\n                  }\n                }}\n                required\n              />\n            </div>\n          </>\n        );\n        \n      case 'workdays':\n        return (\n          <>\n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">ФИО сотрудника</label>\n              <input \n                type=\"text\" \n                className=\"admin-form-input\"\n                value={currentItem?.employer_fio || ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, employer_fio: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div className=\"admin-form-group\">\n              <label className=\"admin-form-label\">Дата и время начала</label>\n              <input \n                type=\"datetime-local\" \n                className=\"admin-form-input\"\n                value={currentItem?.work_time ? new Date(currentItem.work_time).toISOString().slice(0, 16) : ''}\n                onChange={(e) => setCurrentItem({ ...currentItem, work_time: e.target.value })}\n                required\n              />\n            </div>\n          </>\n        );\n        \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"admin-container\">\n      <div className=\"admin-header\">\n        Административная панель\n      </div>\n      \n      {step === 'category' && renderCategorySelection()}\n      {step === 'location' && renderLocationSelection()}\n      {step === 'data' && renderDataView()}\n      \n      {renderModal()}\n    </div>\n  );\n};\n\nexport default AdminPanel;\n\n*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}