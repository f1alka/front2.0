{"ast":null,"code":"/*import React, { useState, useRef } from 'react';\nimport { FaEdit, FaTimes, FaPlus, FaUser, FaCalendar, FaArrowLeft, FaClock } from 'react-icons/fa';\nimport './css/admin.css';\n\nconst LOCATIONS = [\n  { id: 1, name: 'Арбат', image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4' },\n  { id: 2, name: 'Проспект мира', image: 'https://images.unsplash.com/photo-1552566626-52f8b828add9' },\n  { id: 3, name: 'Никольская', image: 'https://images.unsplash.com/photo-1514933651103-005eec06c04b' }\n];\n\nconst ROLES = ['Повар', 'Кальянщик', 'Бармен', 'Официант', 'Хостес', 'Другое'];\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('main');\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [modalType, setModalType] = useState(null);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRole, setSelectedRole] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  \n  const [items, setItems] = useState({\n    workers: [\n      { id: 1, name: 'Иван Иванов', role: 'Повар', photo: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80', location: 'Арбат', email: 'ivan@example.com', phone: '+7 999 123 45 67', telegram: '@ivan', description: 'Опытный шеф-повар', workTime: '09:00-18:00' },\n      { id: 2, name: 'Петр Петров', role: 'Бармен', photo: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e', location: 'Никольская', email: 'petr@example.com', phone: '+7 999 765 43 21', telegram: '@petr', description: 'Профессиональный бармен', workTime: '12:00-21:00' }\n    ],\n    regulars: [\n      { id: 1, name: 'Анна Смирнова', photo: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2', location: 'Арбат', description: 'Постоянный клиент с 2020 года' },\n      { id: 2, name: 'Мария Козлова', photo: 'https://images.unsplash.com/photo-1547425260-76bcadfb4f2c', location: 'Проспект мира', description: 'VIP гость' }\n    ],\n    events: [\n      { id: 1, title: 'Джазовый вечер', description: 'Живая музыка и особое меню', location: 'Арбат', date: '2023-10-15', time: '19:00-23:00' },\n      { id: 2, title: 'Дегустация вин', description: 'Презентация новой винной карты', location: 'Никольская', date: '2023-10-20', time: '18:00-22:00' }\n    ]\n  });\n\n  const handleBack = () => {\n    if (currentView === 'items') {\n      setCurrentView('locations');\n      setSelectedLocation(null);\n    } else if (currentView === 'locations') {\n      setCurrentView('main');\n      setSelectedType(null);\n    }\n  };\n\n  const handleMainButtonClick = (type) => {\n    setSelectedType(type);\n    setCurrentView('locations');\n  };\n\n  const handleLocationSelect = (location) => {\n    setSelectedLocation(location);\n    setCurrentView('items');\n  };\n\n  const handleAddItem = () => {\n    setModalType('add');\n    setShowModal(true);\n    setSelectedItem(null);\n  };\n\n  const handleEditItem = (item) => {\n    setModalType('edit');\n    setShowModal(true);\n    setSelectedItem(item);\n  };\n\n  const handleDeleteItem = (item) => {\n    setSelectedItem(item);\n    setShowDeleteConfirm(true);\n  };\n\n  const confirmDelete = () => {\n    setItems(prev => ({\n      ...prev,\n      [selectedType]: prev[selectedType].filter(item => item.id !== selectedItem.id)\n    }));\n    setShowDeleteConfirm(false);\n  };\n\n  const handleFileChange = (e, setFormData) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setFormData(prev => ({ ...prev, photo: reader.result }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleModalSubmit = (formData) => {\n    if (modalType === 'add') {\n      setItems(prev => ({\n        ...prev,\n        [selectedType]: [...prev[selectedType], { id: Date.now(), ...formData, location: selectedLocation }]\n      }));\n    } else {\n      setItems(prev => ({\n        ...prev,\n        [selectedType]: prev[selectedType].map(item => \n          item.id === selectedItem.id ? { ...item, ...formData } : item\n        )\n      }));\n    }\n    setShowModal(false);\n  };\n\n  const filterItems = (items) => {\n    return items.filter(item => {\n      const searchMatch = selectedType === 'events'\n        ? item.title.toLowerCase().includes(searchTerm.toLowerCase())\n        : item.name.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const roleMatch = selectedType === 'workers'\n        ? !selectedRole || item.role === selectedRole\n        : true;\n      \n      const dateMatch = selectedType === 'events'\n        ? !selectedDate || item.date === selectedDate\n        : true;\n\n      return searchMatch && roleMatch && dateMatch;\n    });\n  };\n\n  const renderMainView = () => (\n    <div className=\"main-buttons\">\n      <button className=\"main-button\" onClick={() => handleMainButtonClick('workers')}>\n        <FaUser /> Работники\n      </button>\n      <button className=\"main-button\" onClick={() => handleMainButtonClick('regulars')}>\n        <FaUser /> Постоянники\n      </button>\n      <button className=\"main-button\" onClick={() => handleMainButtonClick('events')}>\n        <FaCalendar /> События\n      </button>\n    </div>\n  );\n\n  const renderLocationsView = () => (\n    <>\n      <div className=\"navigation\">\n        <button className=\"back-button\" onClick={handleBack}>\n          <FaArrowLeft />\n        </button>\n        <h1 className=\"page-title\">Выберите локацию</h1>\n      </div>\n      <div className=\"locations\">\n        {LOCATIONS.map(location => (\n          <div key={location.id} className=\"location-card\" onClick={() => handleLocationSelect(location.name)}>\n            <img src={location.image} alt={location.name} />\n            <h3>{location.name}</h3>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n\n  const renderItemsView = () => {\n    const currentItems = filterItems(items[selectedType].filter(item => item.location === selectedLocation));\n    \n    return (\n      <>\n        <div className=\"navigation\">\n          <button className=\"back-button\" onClick={handleBack}>\n            <FaArrowLeft />\n          </button>\n          <h1 className=\"page-title\">{selectedLocation}</h1>\n        </div>\n        <div className=\"filters\">\n          <input\n            type=\"text\"\n            placeholder={selectedType === 'events' ? \"Поиск по названию...\" : \"Поиск по имени...\"}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"filter-input\"\n          />\n          {selectedType === 'workers' && (\n            <select\n              value={selectedRole}\n              onChange={(e) => setSelectedRole(e.target.value)}\n              className=\"filter-select\"\n            >\n              <option value=\"\">Все должности</option>\n              {ROLES.map(role => (\n                <option key={role} value={role}>{role}</option>\n              ))}\n            </select>\n          )}\n          {selectedType === 'events' && (\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"filter-input\"\n            />\n          )}\n        </div>\n        <div className=\"items-list\">\n          {currentItems.map(item => (\n            <div key={item.id} className=\"item-row\">\n              <div>{item.name || item.title}</div>\n              {selectedType === 'workers' && <div>{item.role}</div>}\n              \n              {selectedType === 'events' && (\n                <>\n                  <div>{item.date}</div>\n                  <div>{item.time}</div>\n                </>\n              )}\n              {selectedType === 'workers' && <div>{item.workTime}</div>}\n              \n              <div>{item.location}</div>\n              <div className=\"item-actions\">\n                <button className=\"action-button delete-button\" onClick={() => handleDeleteItem(item)}>\n                  <FaTimes />\n                </button>\n                <button className=\"action-button edit-button\" onClick={() => handleEditItem(item)}>\n                  <FaEdit />\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n        <button className=\"add-button\" onClick={handleAddItem}>\n          <FaPlus />\n        </button>\n      </>\n    );\n  };\n\n  const renderModal = () => {\n    if (!showModal) return null;\n\n    return (\n      <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n          <ModalForm\n            type={selectedType}\n            initialData={selectedItem}\n            onSubmit={handleModalSubmit}\n            onCancel={() => setShowModal(false)}\n            onFileChange={handleFileChange}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  const renderDeleteConfirm = () => {\n    if (!showDeleteConfirm) return null;\n\n    return (\n      <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n          <h3>Подтверждение удаления</h3>\n          <p>Вы уверены, что хотите удалить этот элемент?</p>\n          <div className=\"modal-buttons\">\n            <button className=\"modal-button cancel-button\" onClick={() => setShowDeleteConfirm(false)}>Нет</button>\n            <button className=\"modal-button confirm-button\" onClick={confirmDelete}>Да</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"admin-panel\">\n      {currentView === 'main' && renderMainView()}\n      {currentView === 'locations' && renderLocationsView()}\n      {currentView === 'items' && renderItemsView()}\n      {renderModal()}\n      {renderDeleteConfirm()}\n    </div>\n  );\n}\n\nfunction ModalForm({ type, initialData, onSubmit, onCancel, onFileChange }) {\n  const [formData, setFormData] = useState(\n    initialData || {\n      name: '',\n      role: '',\n      photo: '',\n      title: '',\n      description: '',\n      email: '',\n      phone: '',\n      telegram: '',\n      workTime: '',\n      date: '',\n      time: ''\n    }\n  );\n\n  const fileInputRef = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-form\">\n      <h3>{initialData ? 'Редактировать' : 'Добавить'}</h3>\n      \n      {type !== 'events' && (\n        <>\n          <div className=\"form-group\">\n            <label>ФИО:</label>\n            <input\n              type=\"text\"\n              value={formData.name}\n              onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group file-input-group\">\n            <label>Фото:</label>\n            <button\n              type=\"button\"\n              className=\"file-input-button\"\n              onClick={() => fileInputRef.current.click()}\n            >\n              Выбрать фото\n            </button>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              style={{ display: 'none' }}\n              onChange={e => onFileChange(e, setFormData)}\n            />\n            <div className=\"file-input-preview\">\n              {formData.photo && <img src={formData.photo} alt=\"Preview\" />}\n            </div>\n          </div>\n        </>\n      )}\n\n      {type === 'workers' && (\n        <>\n          <div className=\"form-group\">\n            <label>Роль:</label>\n            <select\n              value={formData.role}\n              onChange={e => setFormData(prev => ({ ...prev, role: e.target.value }))}\n              required\n            >\n              <option value=\"\">Выберите роль</option>\n              {ROLES.map(role => (\n                <option key={role} value={role}>{role}</option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Время работы:</label>\n            <input\n              type=\"text\"\n              value={formData.workTime}\n              onChange={e => setFormData(prev => ({ ...prev, workTime: e.target.value }))}\n              placeholder=\"09:00-18:00\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Email:</label>\n            <input\n              type=\"email\"\n              value={formData.email}\n              onChange={e => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Телефон:</label>\n            <input\n              type=\"tel\"\n              value={formData.phone}\n              onChange={e => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Telegram:</label>\n            <input\n              type=\"text\"\n              value={formData.telegram}\n              onChange={e => setFormData(prev => ({ ...prev, telegram: e.target.value }))}\n              required\n            />\n          </div>\n        </>\n      )}\n\n      {type === 'events' && (\n        <>\n          <div className=\"form-group\">\n            <label>Название:</label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={e => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Дата:</label>\n            <input\n              type=\"date\"\n              value={formData.date}\n              onChange={e => setFormData(prev => ({ ...prev, date: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Время:</label>\n            <input\n              type=\"text\"\n              value={formData.time}\n              placeholder=\"18:00-22:00\"\n              onChange={e => setFormData(prev => ({ ...prev, time: e.target.value }))}\n              required\n            />\n          </div>\n        </>\n      )}\n\n      <div className=\"form-group\">\n        <label>Описание:</label>\n        <textarea\n          value={formData.description}\n          onChange={e => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          required\n          rows=\"4\"\n        />\n      </div>\n\n      <div className=\"modal-buttons\">\n        <button type=\"button\" className=\"modal-button cancel-button\" onClick={onCancel}>\n          Отмена\n        </button>\n        <button type=\"submit\" className=\"modal-button confirm-button\">\n          {initialData ? 'Сохранить' : 'Добавить'}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default App;\n\n*/","map":{"version":3,"names":[],"sources":["/home/f1alka/front_fut/front2.0/src/pages/Mixes.jsx"],"sourcesContent":["/*import React, { useState, useRef } from 'react';\nimport { FaEdit, FaTimes, FaPlus, FaUser, FaCalendar, FaArrowLeft, FaClock } from 'react-icons/fa';\nimport './css/admin.css';\n\nconst LOCATIONS = [\n  { id: 1, name: 'Арбат', image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4' },\n  { id: 2, name: 'Проспект мира', image: 'https://images.unsplash.com/photo-1552566626-52f8b828add9' },\n  { id: 3, name: 'Никольская', image: 'https://images.unsplash.com/photo-1514933651103-005eec06c04b' }\n];\n\nconst ROLES = ['Повар', 'Кальянщик', 'Бармен', 'Официант', 'Хостес', 'Другое'];\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('main');\n  const [selectedType, setSelectedType] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [modalType, setModalType] = useState(null);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRole, setSelectedRole] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  \n  const [items, setItems] = useState({\n    workers: [\n      { id: 1, name: 'Иван Иванов', role: 'Повар', photo: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80', location: 'Арбат', email: 'ivan@example.com', phone: '+7 999 123 45 67', telegram: '@ivan', description: 'Опытный шеф-повар', workTime: '09:00-18:00' },\n      { id: 2, name: 'Петр Петров', role: 'Бармен', photo: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e', location: 'Никольская', email: 'petr@example.com', phone: '+7 999 765 43 21', telegram: '@petr', description: 'Профессиональный бармен', workTime: '12:00-21:00' }\n    ],\n    regulars: [\n      { id: 1, name: 'Анна Смирнова', photo: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2', location: 'Арбат', description: 'Постоянный клиент с 2020 года' },\n      { id: 2, name: 'Мария Козлова', photo: 'https://images.unsplash.com/photo-1547425260-76bcadfb4f2c', location: 'Проспект мира', description: 'VIP гость' }\n    ],\n    events: [\n      { id: 1, title: 'Джазовый вечер', description: 'Живая музыка и особое меню', location: 'Арбат', date: '2023-10-15', time: '19:00-23:00' },\n      { id: 2, title: 'Дегустация вин', description: 'Презентация новой винной карты', location: 'Никольская', date: '2023-10-20', time: '18:00-22:00' }\n    ]\n  });\n\n  const handleBack = () => {\n    if (currentView === 'items') {\n      setCurrentView('locations');\n      setSelectedLocation(null);\n    } else if (currentView === 'locations') {\n      setCurrentView('main');\n      setSelectedType(null);\n    }\n  };\n\n  const handleMainButtonClick = (type) => {\n    setSelectedType(type);\n    setCurrentView('locations');\n  };\n\n  const handleLocationSelect = (location) => {\n    setSelectedLocation(location);\n    setCurrentView('items');\n  };\n\n  const handleAddItem = () => {\n    setModalType('add');\n    setShowModal(true);\n    setSelectedItem(null);\n  };\n\n  const handleEditItem = (item) => {\n    setModalType('edit');\n    setShowModal(true);\n    setSelectedItem(item);\n  };\n\n  const handleDeleteItem = (item) => {\n    setSelectedItem(item);\n    setShowDeleteConfirm(true);\n  };\n\n  const confirmDelete = () => {\n    setItems(prev => ({\n      ...prev,\n      [selectedType]: prev[selectedType].filter(item => item.id !== selectedItem.id)\n    }));\n    setShowDeleteConfirm(false);\n  };\n\n  const handleFileChange = (e, setFormData) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setFormData(prev => ({ ...prev, photo: reader.result }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleModalSubmit = (formData) => {\n    if (modalType === 'add') {\n      setItems(prev => ({\n        ...prev,\n        [selectedType]: [...prev[selectedType], { id: Date.now(), ...formData, location: selectedLocation }]\n      }));\n    } else {\n      setItems(prev => ({\n        ...prev,\n        [selectedType]: prev[selectedType].map(item => \n          item.id === selectedItem.id ? { ...item, ...formData } : item\n        )\n      }));\n    }\n    setShowModal(false);\n  };\n\n  const filterItems = (items) => {\n    return items.filter(item => {\n      const searchMatch = selectedType === 'events'\n        ? item.title.toLowerCase().includes(searchTerm.toLowerCase())\n        : item.name.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const roleMatch = selectedType === 'workers'\n        ? !selectedRole || item.role === selectedRole\n        : true;\n      \n      const dateMatch = selectedType === 'events'\n        ? !selectedDate || item.date === selectedDate\n        : true;\n\n      return searchMatch && roleMatch && dateMatch;\n    });\n  };\n\n  const renderMainView = () => (\n    <div className=\"main-buttons\">\n      <button className=\"main-button\" onClick={() => handleMainButtonClick('workers')}>\n        <FaUser /> Работники\n      </button>\n      <button className=\"main-button\" onClick={() => handleMainButtonClick('regulars')}>\n        <FaUser /> Постоянники\n      </button>\n      <button className=\"main-button\" onClick={() => handleMainButtonClick('events')}>\n        <FaCalendar /> События\n      </button>\n    </div>\n  );\n\n  const renderLocationsView = () => (\n    <>\n      <div className=\"navigation\">\n        <button className=\"back-button\" onClick={handleBack}>\n          <FaArrowLeft />\n        </button>\n        <h1 className=\"page-title\">Выберите локацию</h1>\n      </div>\n      <div className=\"locations\">\n        {LOCATIONS.map(location => (\n          <div key={location.id} className=\"location-card\" onClick={() => handleLocationSelect(location.name)}>\n            <img src={location.image} alt={location.name} />\n            <h3>{location.name}</h3>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n\n  const renderItemsView = () => {\n    const currentItems = filterItems(items[selectedType].filter(item => item.location === selectedLocation));\n    \n    return (\n      <>\n        <div className=\"navigation\">\n          <button className=\"back-button\" onClick={handleBack}>\n            <FaArrowLeft />\n          </button>\n          <h1 className=\"page-title\">{selectedLocation}</h1>\n        </div>\n        <div className=\"filters\">\n          <input\n            type=\"text\"\n            placeholder={selectedType === 'events' ? \"Поиск по названию...\" : \"Поиск по имени...\"}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"filter-input\"\n          />\n          {selectedType === 'workers' && (\n            <select\n              value={selectedRole}\n              onChange={(e) => setSelectedRole(e.target.value)}\n              className=\"filter-select\"\n            >\n              <option value=\"\">Все должности</option>\n              {ROLES.map(role => (\n                <option key={role} value={role}>{role}</option>\n              ))}\n            </select>\n          )}\n          {selectedType === 'events' && (\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"filter-input\"\n            />\n          )}\n        </div>\n        <div className=\"items-list\">\n          {currentItems.map(item => (\n            <div key={item.id} className=\"item-row\">\n              <div>{item.name || item.title}</div>\n              {selectedType === 'workers' && <div>{item.role}</div>}\n              \n              {selectedType === 'events' && (\n                <>\n                  <div>{item.date}</div>\n                  <div>{item.time}</div>\n                </>\n              )}\n              {selectedType === 'workers' && <div>{item.workTime}</div>}\n              \n              <div>{item.location}</div>\n              <div className=\"item-actions\">\n                <button className=\"action-button delete-button\" onClick={() => handleDeleteItem(item)}>\n                  <FaTimes />\n                </button>\n                <button className=\"action-button edit-button\" onClick={() => handleEditItem(item)}>\n                  <FaEdit />\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n        <button className=\"add-button\" onClick={handleAddItem}>\n          <FaPlus />\n        </button>\n      </>\n    );\n  };\n\n  const renderModal = () => {\n    if (!showModal) return null;\n\n    return (\n      <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n          <ModalForm\n            type={selectedType}\n            initialData={selectedItem}\n            onSubmit={handleModalSubmit}\n            onCancel={() => setShowModal(false)}\n            onFileChange={handleFileChange}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  const renderDeleteConfirm = () => {\n    if (!showDeleteConfirm) return null;\n\n    return (\n      <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n          <h3>Подтверждение удаления</h3>\n          <p>Вы уверены, что хотите удалить этот элемент?</p>\n          <div className=\"modal-buttons\">\n            <button className=\"modal-button cancel-button\" onClick={() => setShowDeleteConfirm(false)}>Нет</button>\n            <button className=\"modal-button confirm-button\" onClick={confirmDelete}>Да</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"admin-panel\">\n      {currentView === 'main' && renderMainView()}\n      {currentView === 'locations' && renderLocationsView()}\n      {currentView === 'items' && renderItemsView()}\n      {renderModal()}\n      {renderDeleteConfirm()}\n    </div>\n  );\n}\n\nfunction ModalForm({ type, initialData, onSubmit, onCancel, onFileChange }) {\n  const [formData, setFormData] = useState(\n    initialData || {\n      name: '',\n      role: '',\n      photo: '',\n      title: '',\n      description: '',\n      email: '',\n      phone: '',\n      telegram: '',\n      workTime: '',\n      date: '',\n      time: ''\n    }\n  );\n\n  const fileInputRef = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-form\">\n      <h3>{initialData ? 'Редактировать' : 'Добавить'}</h3>\n      \n      {type !== 'events' && (\n        <>\n          <div className=\"form-group\">\n            <label>ФИО:</label>\n            <input\n              type=\"text\"\n              value={formData.name}\n              onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group file-input-group\">\n            <label>Фото:</label>\n            <button\n              type=\"button\"\n              className=\"file-input-button\"\n              onClick={() => fileInputRef.current.click()}\n            >\n              Выбрать фото\n            </button>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              style={{ display: 'none' }}\n              onChange={e => onFileChange(e, setFormData)}\n            />\n            <div className=\"file-input-preview\">\n              {formData.photo && <img src={formData.photo} alt=\"Preview\" />}\n            </div>\n          </div>\n        </>\n      )}\n\n      {type === 'workers' && (\n        <>\n          <div className=\"form-group\">\n            <label>Роль:</label>\n            <select\n              value={formData.role}\n              onChange={e => setFormData(prev => ({ ...prev, role: e.target.value }))}\n              required\n            >\n              <option value=\"\">Выберите роль</option>\n              {ROLES.map(role => (\n                <option key={role} value={role}>{role}</option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Время работы:</label>\n            <input\n              type=\"text\"\n              value={formData.workTime}\n              onChange={e => setFormData(prev => ({ ...prev, workTime: e.target.value }))}\n              placeholder=\"09:00-18:00\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Email:</label>\n            <input\n              type=\"email\"\n              value={formData.email}\n              onChange={e => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Телефон:</label>\n            <input\n              type=\"tel\"\n              value={formData.phone}\n              onChange={e => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Telegram:</label>\n            <input\n              type=\"text\"\n              value={formData.telegram}\n              onChange={e => setFormData(prev => ({ ...prev, telegram: e.target.value }))}\n              required\n            />\n          </div>\n        </>\n      )}\n\n      {type === 'events' && (\n        <>\n          <div className=\"form-group\">\n            <label>Название:</label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={e => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Дата:</label>\n            <input\n              type=\"date\"\n              value={formData.date}\n              onChange={e => setFormData(prev => ({ ...prev, date: e.target.value }))}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Время:</label>\n            <input\n              type=\"text\"\n              value={formData.time}\n              placeholder=\"18:00-22:00\"\n              onChange={e => setFormData(prev => ({ ...prev, time: e.target.value }))}\n              required\n            />\n          </div>\n        </>\n      )}\n\n      <div className=\"form-group\">\n        <label>Описание:</label>\n        <textarea\n          value={formData.description}\n          onChange={e => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          required\n          rows=\"4\"\n        />\n      </div>\n\n      <div className=\"modal-buttons\">\n        <button type=\"button\" className=\"modal-button cancel-button\" onClick={onCancel}>\n          Отмена\n        </button>\n        <button type=\"submit\" className=\"modal-button confirm-button\">\n          {initialData ? 'Сохранить' : 'Добавить'}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default App;\n\n*/\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}