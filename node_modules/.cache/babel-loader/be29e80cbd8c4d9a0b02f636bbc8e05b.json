{"ast":null,"code":"/* import { useState, useEffect } from 'react';\nimport './css/table.css';\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(\"Ошибка в компоненте:\", error);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Что-то пошло не так...</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nfunction App() {\n  const [workdays, setWorkdays] = useState([]);  // Данные о рабочих днях\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalItems, setTotalItems] = useState(0);  // Общее количество рабочих дней\n  const [searchName, setSearchName] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const itemsPerPage = 10;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://172.20.10.2:8000/workdays/get_list_workdays?page=${currentPage}&limit=${itemsPerPage}`);\n        const data = await response.json();\n\n        // Проверка структуры данных и обновление состояний\n        if (data && Array.isArray(data)) {\n          setWorkdays(data);  // Данные о рабочих днях\n          setTotalItems(data.length);  // Общее количество\n        }\n      } catch (error) {\n        console.error('Ошибка при загрузке данных:', error);\n      }\n    };\n\n    fetchData();\n  }, [currentPage]);\n\n  const filteredWorkdays = workdays.filter(workday => {\n    const nameMatch = workday.employer_fio.toLowerCase().includes(searchName.toLowerCase());\n    const dateMatch = !selectedDate || workday.work_time.startsWith(selectedDate);\n    return nameMatch && dateMatch;\n  });\n\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentWorkdays = filteredWorkdays.slice(indexOfFirstItem, indexOfLastItem);\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n\n  const getStatusText = (status) => {\n    switch (status) {\n      case 0: return 'работает';\n      case 1: return 'не начал';\n      case 2: return 'не пришел';\n      default: return '';\n    }\n  };\n\n  const getStatusClass = (status) => {\n    switch (status) {\n      case 0: return 'status-working';\n      case 1: return 'status-not-started';\n      case 2: return 'status-absent';\n      default: return '';\n    }\n  };\n\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    const maxVisiblePages = 5;\n    \n    if (totalPages <= maxVisiblePages) {\n      for (let i = 1; i <= totalPages; i++) {\n        pageNumbers.push(i);\n      }\n    } else {\n      pageNumbers.push(1);\n      \n      if (currentPage > 3) {\n        pageNumbers.push('...');\n      }\n      \n      for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {\n        pageNumbers.push(i);\n      }\n      \n      if (currentPage < totalPages - 2) {\n        pageNumbers.push('...');\n      }\n      \n      pageNumbers.push(totalPages);\n    }\n    \n    return pageNumbers;\n  };\n\n  return (\n    <ErrorBoundary>\n      <div className=\"schedule-container\">\n        <div className=\"header\">\n          <h1>Расписание сотрудников</h1>\n          <p>Управление расписанием и статусами сотрудников</p>\n        </div>\n\n        <div className=\"filters\">\n          <div className=\"filters-grid\">\n            <div className=\"filter-group\">\n              <label>Поиск по ФИО</label>\n              <input\n                type=\"text\"\n                value={searchName}\n                onChange={(e) => setSearchName(e.target.value)}\n                placeholder=\"Введите ФИО сотрудника\"\n              />\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Фильтр по дате</label>\n              <input\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n\n        {filteredWorkdays.length === 0 ? (\n          <div className=\"no-data\">Нет данных для отображения</div>\n        ) : (\n          <div className=\"employees-grid\">\n            {currentWorkdays.map(workday => (\n              <div key={workday.id} className=\"employee-card\">\n                <div className=\"card-content\">\n                  <h3 className=\"employee-name\">{workday.employer_fio}</h3>\n                  <p className=\"employee-date\">{new Date(workday.work_time).toLocaleDateString()}</p>\n                  <span className={`status-badge ${getStatusClass(workday.status)}`}>\n                    {getStatusText(workday.status)}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {totalPages > 1 && (\n          <div className=\"pagination\">\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n              disabled={currentPage === 1}\n            >\n              ←\n            </button>\n            \n            {getPageNumbers().map((pageNum, index) => (\n              pageNum === '...' ? (\n                <span key={`ellipsis-${index}`} className=\"ellipsis\">\n                  ...\n                </span>\n              ) : (\n                <button\n                  key={pageNum}\n                  onClick={() => setCurrentPage(pageNum)}\n                  className={currentPage === pageNum ? 'active' : ''}\n                >\n                  {pageNum}\n                </button>\n              )\n            ))}\n            \n            <button\n              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n              disabled={currentPage === totalPages}\n            >\n              →\n            </button>\n          </div>\n        )}\n\n        <div className=\"results-counter\">\n          Показано {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, filteredWorkdays.length)} из {totalItems} сотрудников\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n*/\n\n/*import React, { StrictMode, useState } from 'react';\nimport './css/LocationSelect.css';\nimport './css/Schedule.css';\n\n// Экспортируем все компоненты как named exports\nexport function Table() {\n  return <div>This is the Table component</div>;\n}\n\nexport function LocationSelect({ locations, onSelect }) {\n  return (\n    <div className=\"location-select\">\n      <h1>Выберите локацию</h1>\n      <div className=\"location-cards\">\n        {locations.map((location) => (\n          <div\n            key={location.id}\n            className=\"location-card\"\n            onClick={() => onSelect(location)}\n          >\n            <img src={location.image} alt={location.name} />\n            <h2>{location.name}</h2>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function Schedule({ location }) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedPosition, setSelectedPosition] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState(location?.name || '');\n\n  const employees = [\n    {\n      id: 1,\n      name: 'Иванов Иван',\n      position: 'Официант',\n      location: 'Арбат',\n      schedule: { date: '2024-03-18', time: '10:00 - 18:00' },\n    },\n    {\n      id: 2,\n      name: 'Петрова Анна',\n      position: 'Бармен',\n      location: 'Проспект мира',\n      schedule: { date: '2024-03-19', time: '12:00 - 20:00' },\n    },\n    {\n      id: 3,\n      name: 'Сидоров Алексей',\n      position: 'Администратор',\n      location: 'Никольская',\n      schedule: { date: '2024-03-20', time: '09:00 - 17:00' },\n    },\n    {\n      id: 4,\n      name: 'Козлова Елена',\n      position: 'Повар',\n      location: 'Арбат',\n      schedule: { date: '2024-03-21', time: '08:00 - 16:00' },\n    },\n    {\n      id: 5,\n      name: 'Морозов Дмитрий',\n      position: 'Официант',\n      location: 'Проспект мира',\n      schedule: { date: '2024-03-22', time: '14:00 - 22:00' },\n    },\n    {\n      id: 6,\n      name: 'Волкова Ольга',\n      position: 'Бармен',\n      location: 'Никольская',\n      schedule: { date: '2024-03-23', time: '11:00 - 19:00' },\n    },\n    {\n      id: 7,\n      name: 'Новиков Сергей',\n      position: 'Администратор',\n      location: 'Арбат',\n      schedule: { date: '2024-03-24', time: '10:00 - 18:00' },\n    },\n    {\n      id: 8,\n      name: 'Лебедева Мария',\n      position: 'Повар',\n      location: 'Проспект мира',\n      schedule: { date: '2024-03-25', time: '07:00 - 15:00' },\n    },\n    {\n      id: 9,\n      name: 'Кузнецов Андрей',\n      position: 'Официант',\n      location: 'Никольская',\n      schedule: { date: '2024-03-26', time: '13:00 - 21:00' },\n    },\n    {\n      id: 10,\n      name: 'Соколова Виктория',\n      position: 'Бармен',\n      location: 'Арбат',\n      schedule: { date: '2024-03-27', time: '12:00 - 20:00' },\n    },\n  ];\n\n  const positions = ['Официант', 'Бармен', 'Администратор', 'Повар'];\n  const locations = ['Арбат', 'Проспект мира', 'Никольская'];\n\n  const filteredEmployees = employees.filter((employee) => {\n    const matchesSearch = employee.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesPosition = !selectedPosition || employee.position === selectedPosition;\n    const matchesDate = !selectedDate || employee.schedule.date === selectedDate;\n    const matchesLocation = !selectedLocation || employee.location === selectedLocation;\n    return matchesSearch && matchesPosition && matchesDate && matchesLocation;\n  });\n\n  return (\n    <div className=\"schedule\">\n      <div className=\"schedule-header\">\n        <h1>Расписание сотрудников</h1>\n        <div className=\"filters\">\n          <input\n            type=\"text\"\n            placeholder=\"Поиск по имени\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n          <input\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n          />\n          <select\n            value={selectedPosition}\n            onChange={(e) => setSelectedPosition(e.target.value)}\n          >\n            <option value=\"\">Все должности</option>\n            {positions.map((position) => (\n              <option key={position} value={position}>\n                {position}\n              </option>\n            ))}\n          </select>\n          <select\n            value={selectedLocation}\n            onChange={(e) => setSelectedLocation(e.target.value)}\n          >\n            <option value=\"\">Все локации</option>\n            {locations.map((loc) => (\n              <option key={loc} value={loc}>\n                {loc}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"employee-cards\">\n        {filteredEmployees.map((employee) => (\n          <div key={employee.id} className=\"employee-card\">\n            <div className=\"employee-info\">\n              <h3>{employee.name}</h3>\n              <p>{employee.position}</p>\n              <p>{employee.location}</p>\n              <p>{employee.schedule.time}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function App() {\n  const [selectedLocation, setSelectedLocation] = useState(null);\n\n  const locations = [\n    { id: 1, name: 'Арбат', image: '/images/arbat.jpg' },\n    { id: 2, name: 'Проспект мира', image: './prospekt_mira.jpg' },\n    { id: 3, name: 'Никольская', image: './nikolskaya.jpg' },\n  ];\n\n  return (\n    <div className=\"app\">\n      {!selectedLocation ? (\n        <LocationSelect locations={locations} onSelect={setSelectedLocation} />\n      ) : (\n        <Schedule location={selectedLocation} />\n      )}\n    </div>\n  );\n}\n\n*/","map":{"version":3,"names":[],"sources":["/home/f1alka/front_fut/front2.0/src/pages/Table.jsx"],"sourcesContent":["/* import { useState, useEffect } from 'react';\nimport './css/table.css';\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(\"Ошибка в компоненте:\", error);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Что-то пошло не так...</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nfunction App() {\n  const [workdays, setWorkdays] = useState([]);  // Данные о рабочих днях\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalItems, setTotalItems] = useState(0);  // Общее количество рабочих дней\n  const [searchName, setSearchName] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const itemsPerPage = 10;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://172.20.10.2:8000/workdays/get_list_workdays?page=${currentPage}&limit=${itemsPerPage}`);\n        const data = await response.json();\n\n        // Проверка структуры данных и обновление состояний\n        if (data && Array.isArray(data)) {\n          setWorkdays(data);  // Данные о рабочих днях\n          setTotalItems(data.length);  // Общее количество\n        }\n      } catch (error) {\n        console.error('Ошибка при загрузке данных:', error);\n      }\n    };\n\n    fetchData();\n  }, [currentPage]);\n\n  const filteredWorkdays = workdays.filter(workday => {\n    const nameMatch = workday.employer_fio.toLowerCase().includes(searchName.toLowerCase());\n    const dateMatch = !selectedDate || workday.work_time.startsWith(selectedDate);\n    return nameMatch && dateMatch;\n  });\n\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentWorkdays = filteredWorkdays.slice(indexOfFirstItem, indexOfLastItem);\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n\n  const getStatusText = (status) => {\n    switch (status) {\n      case 0: return 'работает';\n      case 1: return 'не начал';\n      case 2: return 'не пришел';\n      default: return '';\n    }\n  };\n\n  const getStatusClass = (status) => {\n    switch (status) {\n      case 0: return 'status-working';\n      case 1: return 'status-not-started';\n      case 2: return 'status-absent';\n      default: return '';\n    }\n  };\n\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    const maxVisiblePages = 5;\n    \n    if (totalPages <= maxVisiblePages) {\n      for (let i = 1; i <= totalPages; i++) {\n        pageNumbers.push(i);\n      }\n    } else {\n      pageNumbers.push(1);\n      \n      if (currentPage > 3) {\n        pageNumbers.push('...');\n      }\n      \n      for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {\n        pageNumbers.push(i);\n      }\n      \n      if (currentPage < totalPages - 2) {\n        pageNumbers.push('...');\n      }\n      \n      pageNumbers.push(totalPages);\n    }\n    \n    return pageNumbers;\n  };\n\n  return (\n    <ErrorBoundary>\n      <div className=\"schedule-container\">\n        <div className=\"header\">\n          <h1>Расписание сотрудников</h1>\n          <p>Управление расписанием и статусами сотрудников</p>\n        </div>\n\n        <div className=\"filters\">\n          <div className=\"filters-grid\">\n            <div className=\"filter-group\">\n              <label>Поиск по ФИО</label>\n              <input\n                type=\"text\"\n                value={searchName}\n                onChange={(e) => setSearchName(e.target.value)}\n                placeholder=\"Введите ФИО сотрудника\"\n              />\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Фильтр по дате</label>\n              <input\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n\n        {filteredWorkdays.length === 0 ? (\n          <div className=\"no-data\">Нет данных для отображения</div>\n        ) : (\n          <div className=\"employees-grid\">\n            {currentWorkdays.map(workday => (\n              <div key={workday.id} className=\"employee-card\">\n                <div className=\"card-content\">\n                  <h3 className=\"employee-name\">{workday.employer_fio}</h3>\n                  <p className=\"employee-date\">{new Date(workday.work_time).toLocaleDateString()}</p>\n                  <span className={`status-badge ${getStatusClass(workday.status)}`}>\n                    {getStatusText(workday.status)}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {totalPages > 1 && (\n          <div className=\"pagination\">\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n              disabled={currentPage === 1}\n            >\n              ←\n            </button>\n            \n            {getPageNumbers().map((pageNum, index) => (\n              pageNum === '...' ? (\n                <span key={`ellipsis-${index}`} className=\"ellipsis\">\n                  ...\n                </span>\n              ) : (\n                <button\n                  key={pageNum}\n                  onClick={() => setCurrentPage(pageNum)}\n                  className={currentPage === pageNum ? 'active' : ''}\n                >\n                  {pageNum}\n                </button>\n              )\n            ))}\n            \n            <button\n              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n              disabled={currentPage === totalPages}\n            >\n              →\n            </button>\n          </div>\n        )}\n\n        <div className=\"results-counter\">\n          Показано {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, filteredWorkdays.length)} из {totalItems} сотрудников\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n*/\n\n\n/*import React, { StrictMode, useState } from 'react';\nimport './css/LocationSelect.css';\nimport './css/Schedule.css';\n\n// Экспортируем все компоненты как named exports\nexport function Table() {\n  return <div>This is the Table component</div>;\n}\n\nexport function LocationSelect({ locations, onSelect }) {\n  return (\n    <div className=\"location-select\">\n      <h1>Выберите локацию</h1>\n      <div className=\"location-cards\">\n        {locations.map((location) => (\n          <div\n            key={location.id}\n            className=\"location-card\"\n            onClick={() => onSelect(location)}\n          >\n            <img src={location.image} alt={location.name} />\n            <h2>{location.name}</h2>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function Schedule({ location }) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedPosition, setSelectedPosition] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState(location?.name || '');\n\n  const employees = [\n    {\n      id: 1,\n      name: 'Иванов Иван',\n      position: 'Официант',\n      location: 'Арбат',\n      schedule: { date: '2024-03-18', time: '10:00 - 18:00' },\n    },\n    {\n      id: 2,\n      name: 'Петрова Анна',\n      position: 'Бармен',\n      location: 'Проспект мира',\n      schedule: { date: '2024-03-19', time: '12:00 - 20:00' },\n    },\n    {\n      id: 3,\n      name: 'Сидоров Алексей',\n      position: 'Администратор',\n      location: 'Никольская',\n      schedule: { date: '2024-03-20', time: '09:00 - 17:00' },\n    },\n    {\n      id: 4,\n      name: 'Козлова Елена',\n      position: 'Повар',\n      location: 'Арбат',\n      schedule: { date: '2024-03-21', time: '08:00 - 16:00' },\n    },\n    {\n      id: 5,\n      name: 'Морозов Дмитрий',\n      position: 'Официант',\n      location: 'Проспект мира',\n      schedule: { date: '2024-03-22', time: '14:00 - 22:00' },\n    },\n    {\n      id: 6,\n      name: 'Волкова Ольга',\n      position: 'Бармен',\n      location: 'Никольская',\n      schedule: { date: '2024-03-23', time: '11:00 - 19:00' },\n    },\n    {\n      id: 7,\n      name: 'Новиков Сергей',\n      position: 'Администратор',\n      location: 'Арбат',\n      schedule: { date: '2024-03-24', time: '10:00 - 18:00' },\n    },\n    {\n      id: 8,\n      name: 'Лебедева Мария',\n      position: 'Повар',\n      location: 'Проспект мира',\n      schedule: { date: '2024-03-25', time: '07:00 - 15:00' },\n    },\n    {\n      id: 9,\n      name: 'Кузнецов Андрей',\n      position: 'Официант',\n      location: 'Никольская',\n      schedule: { date: '2024-03-26', time: '13:00 - 21:00' },\n    },\n    {\n      id: 10,\n      name: 'Соколова Виктория',\n      position: 'Бармен',\n      location: 'Арбат',\n      schedule: { date: '2024-03-27', time: '12:00 - 20:00' },\n    },\n  ];\n\n  const positions = ['Официант', 'Бармен', 'Администратор', 'Повар'];\n  const locations = ['Арбат', 'Проспект мира', 'Никольская'];\n\n  const filteredEmployees = employees.filter((employee) => {\n    const matchesSearch = employee.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesPosition = !selectedPosition || employee.position === selectedPosition;\n    const matchesDate = !selectedDate || employee.schedule.date === selectedDate;\n    const matchesLocation = !selectedLocation || employee.location === selectedLocation;\n    return matchesSearch && matchesPosition && matchesDate && matchesLocation;\n  });\n\n  return (\n    <div className=\"schedule\">\n      <div className=\"schedule-header\">\n        <h1>Расписание сотрудников</h1>\n        <div className=\"filters\">\n          <input\n            type=\"text\"\n            placeholder=\"Поиск по имени\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n          <input\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n          />\n          <select\n            value={selectedPosition}\n            onChange={(e) => setSelectedPosition(e.target.value)}\n          >\n            <option value=\"\">Все должности</option>\n            {positions.map((position) => (\n              <option key={position} value={position}>\n                {position}\n              </option>\n            ))}\n          </select>\n          <select\n            value={selectedLocation}\n            onChange={(e) => setSelectedLocation(e.target.value)}\n          >\n            <option value=\"\">Все локации</option>\n            {locations.map((loc) => (\n              <option key={loc} value={loc}>\n                {loc}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"employee-cards\">\n        {filteredEmployees.map((employee) => (\n          <div key={employee.id} className=\"employee-card\">\n            <div className=\"employee-info\">\n              <h3>{employee.name}</h3>\n              <p>{employee.position}</p>\n              <p>{employee.location}</p>\n              <p>{employee.schedule.time}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function App() {\n  const [selectedLocation, setSelectedLocation] = useState(null);\n\n  const locations = [\n    { id: 1, name: 'Арбат', image: '/images/arbat.jpg' },\n    { id: 2, name: 'Проспект мира', image: './prospekt_mira.jpg' },\n    { id: 3, name: 'Никольская', image: './nikolskaya.jpg' },\n  ];\n\n  return (\n    <div className=\"app\">\n      {!selectedLocation ? (\n        <LocationSelect locations={locations} onSelect={setSelectedLocation} />\n      ) : (\n        <Schedule location={selectedLocation} />\n      )}\n    </div>\n  );\n}\n\n*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}